// Program 1------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment6
{ /*UniCast Delegate*/
    public delegate void EmployeeDelegate();
    public class UniCastDelegate
    {
        
        static void Main(string[] args)
        {
            Employee employee = new Employee();

          
            EmployeeDelegate employeeDelegate = new EmployeeDelegate(employee.Display);


            employeeDelegate.Invoke();


        }
    }
    public class Employee
    {
        private int empId;
        private string empName;
        private string companyName;
        private string designation;
        private string workLocation;

        

        public Employee()
        {
            Console.Write("Enter the emp id : ");
            this.empId =( Convert.ToInt32(Console.ReadLine()));
            Console.Write("Enter the emp name : ");
            this.empName = Console.ReadLine();

            Console.Write("Enter the Company Name : ");
            this.companyName = Console.ReadLine();

            Console.Write("Enter the emp designation : ");
            this.designation = Console.ReadLine();

            Console.Write("Enter the emp WorkLocation : ");
            this.workLocation = Console.ReadLine();

        }

        public void Display()
        {
            Console.WriteLine("Employee Id : {0}",empId);
            Console.WriteLine("Employee Name : {0}",empName);
            Console.WriteLine("Employee Company Name : {0}",companyName );

            Console.WriteLine("Employee Designation : {0}",designation);

            Console.WriteLine("Employee Work Location : {0}",workLocation);
        }



    }
}


// Program 2------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment6
{ /*Multicaste Delegate*/
    public delegate void EmployeeDelegate();
    public class MultiCastDelegate
    {
        
        static void Main(string[] args)
        {
            Employee employee = new Employee();

          
            EmployeeDelegate employeeDelegate = new EmployeeDelegate(employee.Display);
            employeeDelegate += employee.MarketingExecutiveDisplay;


            employeeDelegate.Invoke();


        }
    }
    public class Employee
    {
        private int empId,meId;
        private string empName,meName;
        private string companyName,meCompanyName;
        private string designation,meDesignation;
        private string workLocation,meWorkLocation;

        

        public Employee()
        {
            Console.Write("Enter the emp id : ");
            this.empId =( Convert.ToInt32(Console.ReadLine()));
            Console.Write("Enter the emp name : ");
            this.empName = Console.ReadLine();

            Console.Write("Enter the Company Name : ");
            this.companyName = Console.ReadLine();

            Console.Write("Enter the emp designation : ");
            this.designation = Console.ReadLine();

            Console.Write("Enter the emp WorkLocation : ");
            this.workLocation = Console.ReadLine();

            Console.WriteLine(":::::::::::::::");

            Console.Write("Enter the MarketingExecutive id : ");
            this.meId = (Convert.ToInt32(Console.ReadLine()));

            Console.Write("Enter the MarketingExecutive name : ");
            this.meName = Console.ReadLine();

            Console.Write("Enter the MarketingExecutive Company Name : ");
            this.meCompanyName = Console.ReadLine();

            Console.Write("Enter the MarketingExecutive designation : ");
            this.meDesignation = Console.ReadLine();

            Console.Write("Enter the MarketingExecutive WorkLocation : ");
            this.meWorkLocation = Console.ReadLine();

        }

        public void Display()
        {
            Console.WriteLine("Employee Details::::::::");
            Console.WriteLine("Employee Id : {0}",empId);
            Console.WriteLine("Employee Name : {0}",empName);
            Console.WriteLine("Employee Company Name : {0}",companyName );

            Console.WriteLine("Employee Designation : {0}",designation);

            Console.WriteLine("Employee Work Location : {0}",workLocation);

            Console.WriteLine(":::::::::::::::::::::::");
        }
        
        public void MarketingExecutiveDisplay()
        {
            Console.WriteLine("MarketingExecutiveDetails:::::::::");
            Console.WriteLine("MarketingExecutive Employee Id : {0}",meId );
            Console.WriteLine("MarketingExecutive Employee Name : {0}", meName);
            Console.WriteLine("MarketingExecutive Employee Company Name : {0}", meCompanyName);

            Console.WriteLine("MarketingExecutive Employee Designation : {0}", meDesignation);

            Console.WriteLine("MarketingExecutive Employee Work Location : {0}", meWorkLocation);
        }


    }
}

// Program 3----------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace _6Delegates
{
class BankAtm
{
public delegate void delegatemethod(int x);
public class Account
{
public int AccountNumber { get; set; }
public int CustomerName { get; set; }
public int Balance =1000;
public int WithDrawAmount { get; set; }
public event delegatemethod UnderBalance;
public event delegatemethod ZeroBalance;
public void Insufficient(int x)
{
UnderBalance(x);
}
public void DepositMoney(int y)
{
ZeroBalance(y);
}
public void WithDraw(int x)
{
if (x < Balance && Balance!=0)
{
Console.WriteLine("Transaction Succesfull");
Console.WriteLine("Remaining Balance is " + (Balance - x));
}
else if(x>Balance && Balance!=0)
{
Console.WriteLine("Insufficient Amount");
Console.WriteLine("Your Current Balance is " + Balance + " only");
}
else
{
Console.WriteLine("Zero Balance :" + Balance);
}
}
public void Deposit(int x)
{
Console.Write("Balance After Depositing: "+ (Balance+x));
}
}
static void Main(string[] args)
{
Account obj = new Account();
Console.WriteLine("Action to be performed WithDraw Amount or Deposit : w or d");
string wd = Console.ReadLine();
if (wd == "w")
{
Console.WriteLine("Enter Balance to be WithDrawn");
int wdbalance = Convert.ToInt32(Console.ReadLine());
obj.UnderBalance += new delegatemethod(obj.WithDraw);
obj.Insufficient(wdbalance);
}
else
{
Console.WriteLine("Enter Amount to be Deposit : ");
int dpbalance = Convert.ToInt32(Console.ReadLine());
obj.ZeroBalance += new delegatemethod(obj.Deposit);
obj.DepositMoney(dpbalance);
}
Console.ReadKey();
}
}
}

